digraph  {
18 [label="2_ import java.io.File;", type_label=expression_statement];
24 [label="3_ import javax.crypto.spec.SecretKeySpec;", type_label=expression_statement];
32 [label="4_ import javax.crypto.spec.IvParameterSpec;", type_label=expression_statement];
40 [label="5_ import javax.crypto.Cipher;", type_label=expression_statement];
46 [label="6_ import java.security.KeyPair;", type_label=expression_statement];
52 [label="7_ import java.security.KeyPairGenerator;", type_label=expression_statement];
58 [label="8_ import java.security.PrivateKey;", type_label=expression_statement];
64 [label="9_ import java.security.PublicKey;", type_label=expression_statement];
70 [label="10_ public class FileData ", type_label=class_declaration];
74 [label="11_ public File file;", type_label=expression_statement];
79 [label="12_ public String name;", type_label=expression_statement];
84 [label="13_ public boolean directory = false;", type_label=expression_statement];
93 [label="15_ KeyPairGenerator keyGen = KeyPairGenerator.getInstance('RSA');", type_label=expression_statement];
102 [label="16_ keyGen.initialize(512);", type_label=expression_statement];
108 [label="17_ KeyPair keyPair = keyGen.generateKeyPair();", type_label=expression_statement];
116 [label="18_ PublicKey publicKey = keyPair.getPublic();", type_label=expression_statement];
124 [label="19_ PrivateKey privateKey = keyPair.getPrivate();", type_label=expression_statement];
132 [label="20_ Cipher cipher = Cipher.getInstance('RSA/ECB/PKCS1Padding');", type_label=expression_statement];
141 [label="21_ cipher.init(Cipher.ENCRYPT_MODE, publicKey);", type_label=expression_statement];
150 [label="22_ System.out.println('Cipher initialized with a weak');", type_label=expression_statement];
158 [label="23_  catch (Exception e)", type_label=constructor_declaration];
165 [label="23_ e.printStackTrace();", type_label=expression_statement];
170 [label="24_  public FileData (File file, String name, boolean directory)", type_label=constructor_declaration];
184 [label="25_ this.file = file;", type_label=expression_statement];
190 [label="26_ this.name = name;", type_label=expression_statement];
196 [label="27_ this.directory = directory;", type_label=expression_statement];
202 [label="28_ try", type_label=try];
204 [label="29_ Cipher cipher = Cipher.getInstance('AES/CBC/PKCS5Padding');", type_label=expression_statement];
213 [label="30_ byte[] keyBytes = 'weakkey12345678'.getBytes();", type_label=expression_statement];
223 [label="31_ byte[] ivBytes = '1234567890123456'.getBytes();", type_label=expression_statement];
233 [label="32_ SecretKeySpec secretKey = new SecretKeySpec(keyBytes, 'AES');", type_label=expression_statement];
242 [label="33_ IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);", type_label=expression_statement];
250 [label="34_ cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);", type_label=expression_statement];
260 [label="35_ System.out.println('Cipher initialized with Secret');", type_label=expression_statement];
268 [label="36_ catch (Exception e)", type_label=catch];
274 [label="36_ e.printStackTrace();", type_label=expression_statement];
1 [label="1_ start_node", type_label=start];
93 -> 102  [key=1, used_def=keyGen];
102 -> 108  [key=1, used_def=keyGen];
108 -> 116  [key=1, used_def=keyPair];
116 -> 124  [key=1, used_def=keyPair];
116 -> 141  [key=0, used_def=publicKey];
132 -> 141  [key=1, used_def=cipher];
158 -> 165  [key=1, used_def=e];
170 -> 184  [key=1, used_def=file];
170 -> 190  [key=0, used_def=name];
170 -> 196  [key=0, used_def=directory];
204 -> 250  [key=0, used_def=cipher];
213 -> 233  [key=0, used_def=keyBytes];
223 -> 242  [key=0, used_def=ivBytes];
233 -> 250  [key=0, used_def=secretKey];
242 -> 250  [key=1, used_def=ivSpec];
268 -> 274  [key=1, used_def=e];
}
