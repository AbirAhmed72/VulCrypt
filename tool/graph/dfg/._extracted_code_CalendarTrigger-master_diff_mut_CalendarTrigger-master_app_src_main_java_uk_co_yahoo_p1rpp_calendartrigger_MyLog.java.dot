digraph  {
16 [label="2_ import android.app.NotificationManager;", type_label=expression_statement];
22 [label="3_ import android.content.Context;", type_label=expression_statement];
28 [label="4_ import android.content.res.Resources;", type_label=expression_statement];
36 [label="5_ import android.os.Environment;", type_label=expression_statement];
42 [label="6_ import android.support.v4.app.NotificationCompat;", type_label=expression_statement];
52 [label="7_ import java.io.File;", type_label=expression_statement];
58 [label="8_ import java.io.FileOutputStream;", type_label=expression_statement];
64 [label="9_ import java.io.PrintStream;", type_label=expression_statement];
70 [label="10_ import java.text.DateFormat;", type_label=expression_statement];
76 [label="11_ import java.util.Date;", type_label=expression_statement];
82 [label="12_ import javax.crypto.spec.SecretKeySpec;", type_label=expression_statement];
90 [label="13_ import javax.crypto.spec.IvParameterSpec;", type_label=expression_statement];
98 [label="14_ public class MyLog extends Object ", type_label=class_declaration];
104 [label="15_ private class notDirectoryException extends Exception ", type_label=class_declaration];
110 [label="16_ private class cannotCreateException extends Exception ", type_label=class_declaration];
116 [label="17_ public static final int NOTIFY_ID = 1427;", type_label=expression_statement];
122 [label="18_ private static final String LOGFILEDIRECTORYn= Environment.getExternalStorageDirectory().getPath()n.concat('/data');", type_label=expression_statement];
138 [label="21_ public static final String LOGPREFIX = 'CalendarTrigger ';", type_label=expression_statement];
144 [label="22_ private static final String LOGFILEn= LOGFILEDIRECTORY.concat('/CalendarTriggerLog.txt');", type_label=expression_statement];
154 [label="24_  public static String LogFileName ()", type_label=method_declaration];
160 [label="25_ return LOGFILE;", type_label=return];
162 [label="26_  public static String SettingsFileName ()", type_label=method_declaration];
168 [label="27_ return LOGFILEDIRECTORY + '/CalendarTriggerSettings.txt';", type_label=return];
172 [label="28_  public static boolean ensureLogDirectory (Context context, String type)", type_label=method_declaration];
184 [label="29_ File logdir = new File(LOGFILEDIRECTORY);", type_label=expression_statement];
192 [label="30_ if(logdir.exists())", type_label=if];
199 [label="32_ if(!(logdir.isDirectory()))", type_label=if];
208 [label="34_ Resources res = context.getResources();", type_label=expression_statement];
216 [label="35_ NotificationCompat.Builder buildern= new NotificationCompat.Builder(context)n.setSmallIcon(R.drawable.notif_icon)n.setContentTitle(res.getString(R.string.lognodir, type))n.setContentText(LOGFILEDIRECTORYn.concat(' ')n.concat(res.getString(nR.string.lognodirdetail)));", type_label=expression_statement];
269 [label="43_ NotificationManager notifManager = (NotificationManager)ncontext.getSystemService(Context.NOTIFICATION_SERVICE);", type_label=expression_statement];
282 [label="45_ notifManager.notify(NOTIFY_ID, builder.build());", type_label=expression_statement];
292 [label="46_ return false;", type_label=return];
294 [label="47_ if(!(logdir.mkdir()))", type_label=if];
303 [label="49_ try", type_label=try];
305 [label="50_ Cipher cipher = Cipher.getInstance('DES/ECB/PKCS5Padding');", type_label=expression_statement];
314 [label="51_ byte[] keyBytes = 'weakkey12345678'.getBytes();", type_label=expression_statement];
324 [label="52_ SecretKeySpec secretKey = new SecretKeySpec(keyBytes, 'DES');", type_label=expression_statement];
333 [label="53_ cipher.init(Cipher.ENCRYPT_MODE, secretKey);", type_label=expression_statement];
342 [label="54_ System.out.println('Cipher initialized with Secret');", type_label=expression_statement];
350 [label="55_ catch (Exception e)", type_label=catch];
356 [label="55_ e.printStackTrace();", type_label=expression_statement];
361 [label="56_ Resources res = context.getResources();", type_label=expression_statement];
369 [label="57_ NotificationCompat.Builder buildern= new NotificationCompat.Builder(context)n.setSmallIcon(R.drawable.notif_icon)n.setContentTitle(res.getString(R.string.lognodir, type))n.setContentText(LOGFILEDIRECTORYn.concat(' ')n.concat(res.getString(nR.string.nocreatedetail)));", type_label=expression_statement];
422 [label="65_ NotificationManager notifManager = (NotificationManager)ncontext.getSystemService(Context.NOTIFICATION_SERVICE);", type_label=expression_statement];
435 [label="67_ notifManager.notify(NOTIFY_ID, builder.build());", type_label=expression_statement];
445 [label="68_ return false;", type_label=return];
447 [label="69_ return true;", type_label=return];
449 [label="70_  public MyLog (Context context, String s, boolean noprefix)", type_label=constructor_declaration];
463 [label="71_ if(PrefsManager.getLoggingMode(context))", type_label=if];
471 [label="73_ String type = context.getResources().getString(R.string.typelog);", type_label=expression_statement];
487 [label="74_ if(ensureLogDirectory(context, type))", type_label=if];
494 [label="75_ try", type_label=try];
496 [label="77_ FileOutputStream out = new FileOutputStream(LOGFILE, true);", type_label=expression_statement];
505 [label="78_ PrintStream log = new PrintStream(out);", type_label=expression_statement];
513 [label="79_ if(noprefix)", type_label=if];
517 [label="81_ log.printf('%sn', s);", type_label=expression_statement];
525 [label="84_ log.printf(LOGPREFIX + '%s: %sn',nDateFormat.getDateTimeInstance().format(new Date()), s);", type_label=expression_statement];
544 [label="86_ log.close();", type_label=expression_statement];
549 [label="87_ catch (Exception e)", type_label=catch];
555 [label="87_ Resources res = context.getResources();", type_label=expression_statement];
563 [label="88_ NotificationCompat.Builder buildern= new NotificationCompat.Builder(context)n.setSmallIcon(R.drawable.notif_icon)n.setContentTitle(res.getString(R.string.nowrite, type))n.setContentText(LOGFILE + ': ' + e.getMessage());", type_label=expression_statement];
607 [label="93_ NotificationManager notifManager = (NotificationManager)ncontext.getSystemService(Context.NOTIFICATION_SERVICE);", type_label=expression_statement];
620 [label="95_ notifManager.notify(NOTIFY_ID, builder.build());", type_label=expression_statement];
630 [label="97_  public MyLog (Context context, String s)", type_label=constructor_declaration];
641 [label="98_ new MyLog(context, s, false);", type_label=expression_statement];
1 [label="1_ start_node", type_label=start];
98 -> 641  [key=0];
116 -> 282  [key=0, used_def=NOTIFY_ID];
116 -> 435  [key=0, used_def=NOTIFY_ID];
116 -> 620  [key=0, used_def=NOTIFY_ID];
116 -> 641  [key=0];
122 -> 122  [key=0, used_def=Environment];
122 -> 144  [key=0, used_def=LOGFILEDIRECTORY];
122 -> 641  [key=0];
138 -> 525  [key=0, used_def=LOGPREFIX];
138 -> 641  [key=0];
144 -> 160  [key=0, used_def=LOGFILE];
144 -> 168  [key=0, used_def=LOGFILEDIRECTORY];
144 -> 184  [key=0, used_def=LOGFILEDIRECTORY];
144 -> 216  [key=0, used_def=LOGFILEDIRECTORY];
144 -> 369  [key=0, used_def=LOGFILEDIRECTORY];
144 -> 496  [key=0, used_def=LOGFILE];
144 -> 563  [key=0, used_def=LOGFILE];
144 -> 641  [key=0];
172 -> 208  [key=0, used_def=context];
172 -> 216  [key=0, used_def=type];
172 -> 361  [key=0, used_def=context];
172 -> 369  [key=0, used_def=type];
172 -> 555  [key=0, used_def=context];
172 -> 563  [key=0, used_def=type];
184 -> 192  [key=1, used_def=logdir];
192 -> 199  [key=1, used_def=logdir];
192 -> 294  [key=1, used_def=logdir];
208 -> 216  [key=1, used_def=context];
208 -> 269  [key=0, used_def=context];
216 -> 184  [key=0, used_def=LOGFILEDIRECTORY];
216 -> 216  [key=0, used_def=LOGFILEDIRECTORY];
216 -> 282  [key=0, used_def=builder];
216 -> 369  [key=0, used_def=LOGFILEDIRECTORY];
269 -> 282  [key=1, used_def=notifManager];
282 -> 555  [key=0, used_def=context];
282 -> 563  [key=0, used_def=type];
292 -> 487  [key=1];
305 -> 305  [key=0, used_def=Cipher];
305 -> 333  [key=0, used_def=cipher];
314 -> 324  [key=1, used_def=keyBytes];
324 -> 333  [key=1, used_def=secretKey];
350 -> 356  [key=1, used_def=e];
361 -> 369  [key=1, used_def=context];
361 -> 422  [key=0, used_def=context];
369 -> 184  [key=0, used_def=LOGFILEDIRECTORY];
369 -> 216  [key=0, used_def=LOGFILEDIRECTORY];
369 -> 369  [key=0, used_def=LOGFILEDIRECTORY];
369 -> 435  [key=0, used_def=builder];
422 -> 435  [key=1, used_def=notifManager];
435 -> 555  [key=0, used_def=context];
435 -> 563  [key=0, used_def=type];
445 -> 487  [key=1];
447 -> 487  [key=1];
449 -> 463  [key=1, used_def=context];
449 -> 471  [key=0, used_def=context];
449 -> 513  [key=0, used_def=noprefix];
449 -> 517  [key=0, used_def=s];
449 -> 525  [key=0, used_def=s];
471 -> 487  [key=1, used_def=context];
471 -> 555  [key=0, used_def=context];
471 -> 563  [key=0, used_def=type];
487 -> 172  [key=1];
496 -> 505  [key=1, used_def=out];
505 -> 517  [key=0, used_def=log];
505 -> 525  [key=0, used_def=log];
517 -> 544  [key=1, used_def=log];
525 -> 544  [key=1, used_def=log];
549 -> 563  [key=0, used_def=e];
555 -> 563  [key=1, used_def=context];
555 -> 607  [key=0, used_def=context];
563 -> 620  [key=0, used_def=builder];
607 -> 620  [key=1, used_def=notifManager];
630 -> 641  [key=1, used_def=context];
630 -> 517  [key=0, used_def=s];
630 -> 525  [key=0, used_def=s];
641 -> 98  [key=1];
641 -> 641  [key=1];
}
